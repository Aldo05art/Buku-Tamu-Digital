# swagger.yaml
openapi: 3.0.0
info:
  title: Digital Guestbook API
  version: 1.0.0
  description: RESTful API for a digital guestbook, allowing users to make and manage entries.

servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [user, admin] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      example:
        id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        username: "guest_user"
        email: "guest@example.com"
        role: "user"
        createdAt: "2024-01-01T12:00:00Z"
        updatedAt: "2024-01-01T12:00:00Z"

    AuthRequest:
      type: object
      properties:
        username: { type: string, minLength: 3 }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        role: { type: string, enum: [user, admin], default: user, nullable: true }
      required: [username, email, password]
    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string }
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        message: { type: string }
        user: { $ref: '#/components/schemas/User' }
        token: { type: string }

    GuestbookEntry:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        content: { type: string }
        userId: { type: string, format: uuid }
        user: # Embedded user info
          type: object
          properties:
            username: { type: string }
            email: { type: string, format: email }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      example:
        id: "b1c2d3e4-f5a6-7890-1234-567890abcdef"
        title: "Sangat Membantu!"
        content: "API ini sangat mudah digunakan dan powerful."
        userId: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        user:
          username: "guest_user"
          email: "guest@example.com"
        createdAt: "2024-01-01T13:00:00Z"
        updatedAt: "2024-01-01T13:00:00Z"

    GuestbookEntryRequest:
      type: object
      properties:
        title: { type: string, maxLength: 255 }
        content: { type: string }
      required: [title, content]

    ErrorResponse:
      type: object
      properties:
        message: { type: string }
        errors: # For validation errors
          type: array
          items:
            type: object
            properties:
              msg: { type: string }
              param: { type: string }
              location: { type: string }
          
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRequest' }
      responses:
        '201':
          description: User registered successfully
          content:
            application/json: { schema: { $ref: '#/components/schemas/AuthResponse' } }
        '400': { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '409': { description: User with this email/username already exists, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json: { schema: { $ref: '#/components/schemas/AuthResponse' } }
        '401': { description: Invalid credentials, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /auth/profile:
    get:
      summary: Get authenticated user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json: { schema: { $ref: '#/components/schemas/User' } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /guestbook:
    get:
      summary: Get all guestbook entries
      responses:
        '200':
          description: A list of guestbook entries
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/GuestbookEntry' }
        '500': { description: Server error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    post:
      summary: Create a new guestbook entry (Authenticated users)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GuestbookEntryRequest' }
      responses:
        '201':
          description: Guestbook entry created successfully
          content:
            application/json: { schema: { $ref: '#/components/schemas/GuestbookEntry' } }
        '400': { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /guestbook/{id}:
    get:
      summary: Get guestbook entry by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
          description: ID of the guestbook entry to retrieve
      responses:
        '200':
          description: Guestbook entry details
          content:
            application/json: { schema: { $ref: '#/components/schemas/GuestbookEntry' } }
        '404': { description: Guestbook entry not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      summary: Update a guestbook entry by ID (Author or Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
          description: ID of the guestbook entry to update
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GuestbookEntryRequest' }
      responses:
        '200':
          description: Guestbook entry updated successfully
          content:
            application/json: { schema: { $ref: '#/components/schemas/GuestbookEntry' } }
        '400': { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: Forbidden (not authorized to update this entry), content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: Guestbook entry not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      summary: Delete a guestbook entry by ID (Author or Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
          description: ID of the guestbook entry to delete
      responses:
        '200': { description: Guestbook entry deleted successfully, content: { application/json: { schema: { type: object, properties: { message: { type: string, example: "Guestbook entry deleted successfully" } } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '403': { description: Forbidden (not authorized to delete this entry), content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: Guestbook entry not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }